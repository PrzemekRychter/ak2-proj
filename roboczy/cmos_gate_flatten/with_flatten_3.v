/* Generated by Yosys 0.9 (git sha1 1979e0b1, i686-w64-mingw32.static-g++ 5.5.0 -Os) */

(* top =  1  *)
(* src = "adder.v:8" *)
module adder(\X[0] , \X[1] , \X[2] , \X[3] , \X[4] , \X[5] , \Y[0] , \Y[1] , \Y[2] , \Y[3] , \Y[4] , \Y[5] , \S[0] , \S[1] , \S[2] , \S[3] , \S[4] , \S[5] , cout);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  (* src = "adder.v:18" *)
  wire G50;
  (* src = "adder.v:36|sfco.v:10" *)
  wire \G50x.Gab ;
  (* src = "adder.v:21|gph.v:8" *)
  wire \GPH0.H ;
  (* src = "adder.v:21|gph.v:7" *)
  wire \GPH0.x ;
  (* src = "adder.v:21|gph.v:7" *)
  wire \GPH0.y ;
  (* src = "adder.v:22|gph.v:7" *)
  wire \GPH1.x ;
  (* src = "adder.v:22|gph.v:7" *)
  wire \GPH1.y ;
  (* src = "adder.v:23|gph.v:7" *)
  wire \GPH2.x ;
  (* src = "adder.v:23|gph.v:7" *)
  wire \GPH2.y ;
  (* src = "adder.v:24|gph.v:7" *)
  wire \GPH3.x ;
  (* src = "adder.v:24|gph.v:7" *)
  wire \GPH3.y ;
  (* src = "adder.v:25|gph.v:7" *)
  wire \GPH4.x ;
  (* src = "adder.v:25|gph.v:7" *)
  wire \GPH4.y ;
  (* src = "adder.v:26|gph.v:7" *)
  wire \GPH5.x ;
  (* src = "adder.v:26|gph.v:7" *)
  wire \GPH5.y ;
  (* src = "adder.v:17" *)
  wire \Hii[0] ;
  (* src = "adder.v:16" *)
  wire \Pii[0] ;
  (* src = "adder.v:12" *)
  output \S[0] ;
  (* src = "adder.v:12" *)
  output \S[1] ;
  (* src = "adder.v:12" *)
  output \S[2] ;
  (* src = "adder.v:12" *)
  output \S[3] ;
  (* src = "adder.v:12" *)
  output \S[4] ;
  (* src = "adder.v:12" *)
  output \S[5] ;
  (* src = "adder.v:10" *)
  input \X[0] ;
  (* src = "adder.v:10" *)
  input \X[1] ;
  (* src = "adder.v:10" *)
  input \X[2] ;
  (* src = "adder.v:10" *)
  input \X[3] ;
  (* src = "adder.v:10" *)
  input \X[4] ;
  (* src = "adder.v:10" *)
  input \X[5] ;
  (* src = "adder.v:11" *)
  input \Y[0] ;
  (* src = "adder.v:11" *)
  input \Y[1] ;
  (* src = "adder.v:11" *)
  input \Y[2] ;
  (* src = "adder.v:11" *)
  input \Y[3] ;
  (* src = "adder.v:11" *)
  input \Y[4] ;
  (* src = "adder.v:11" *)
  input \Y[5] ;
  (* src = "adder.v:13" *)
  output cout;
  NOT _069_ (
    .A(\Y[2] ),
    .Y(_000_)
  );
  NOT _070_ (
    .A(\X[2] ),
    .Y(_001_)
  );
  NOT _071_ (
    .A(\Y[1] ),
    .Y(_002_)
  );
  NOT _072_ (
    .A(\X[1] ),
    .Y(_003_)
  );
  NOT _073_ (
    .A(\Y[3] ),
    .Y(_004_)
  );
  NOT _074_ (
    .A(\X[3] ),
    .Y(_005_)
  );
  NOT _075_ (
    .A(\Y[4] ),
    .Y(_006_)
  );
  NOT _076_ (
    .A(\X[4] ),
    .Y(_007_)
  );
  NOT _077_ (
    .A(\Y[5] ),
    .Y(_008_)
  );
  NOT _078_ (
    .A(\X[5] ),
    .Y(_009_)
  );
  NOT _079_ (
    .A(\Y[0] ),
    .Y(_010_)
  );
  NOT _080_ (
    .A(\X[0] ),
    .Y(_011_)
  );
  NOR _081_ (
    .A(_000_),
    .B(_001_),
    .Y(_012_)
  );
  NAND _082_ (
    .A(\Y[2] ),
    .B(\X[2] ),
    .Y(_013_)
  );
  NOR _083_ (
    .A(\Y[2] ),
    .B(\X[2] ),
    .Y(_014_)
  );
  NAND _084_ (
    .A(_000_),
    .B(_001_),
    .Y(_015_)
  );
  NOR _085_ (
    .A(_012_),
    .B(_014_),
    .Y(_016_)
  );
  NOR _086_ (
    .A(_002_),
    .B(_003_),
    .Y(_017_)
  );
  NAND _087_ (
    .A(\Y[1] ),
    .B(\X[1] ),
    .Y(_018_)
  );
  NOR _088_ (
    .A(\Y[1] ),
    .B(\X[1] ),
    .Y(_019_)
  );
  NOT _089_ (
    .A(_019_),
    .Y(_020_)
  );
  NOR _090_ (
    .A(_010_),
    .B(_011_),
    .Y(_021_)
  );
  NAND _091_ (
    .A(\Y[0] ),
    .B(\X[0] ),
    .Y(_022_)
  );
  NOR _092_ (
    .A(_019_),
    .B(_022_),
    .Y(_023_)
  );
  NOT _093_ (
    .A(_023_),
    .Y(_024_)
  );
  NOR _094_ (
    .A(_017_),
    .B(_023_),
    .Y(_025_)
  );
  NAND _095_ (
    .A(_018_),
    .B(_024_),
    .Y(_026_)
  );
  NOR _096_ (
    .A(_016_),
    .B(_026_),
    .Y(_027_)
  );
  NOR _097_ (
    .A(_014_),
    .B(_025_),
    .Y(_028_)
  );
  NAND _098_ (
    .A(_015_),
    .B(_026_),
    .Y(_029_)
  );
  NOR _099_ (
    .A(_012_),
    .B(_029_),
    .Y(_030_)
  );
  NOR _100_ (
    .A(_027_),
    .B(_030_),
    .Y(\S[2] )
  );
  NOR _101_ (
    .A(_004_),
    .B(_005_),
    .Y(_031_)
  );
  NAND _102_ (
    .A(\Y[3] ),
    .B(\X[3] ),
    .Y(_032_)
  );
  NOR _103_ (
    .A(\Y[3] ),
    .B(\X[3] ),
    .Y(_033_)
  );
  NAND _104_ (
    .A(_004_),
    .B(_005_),
    .Y(_034_)
  );
  NOR _105_ (
    .A(_031_),
    .B(_033_),
    .Y(_035_)
  );
  NOR _106_ (
    .A(_012_),
    .B(_028_),
    .Y(_036_)
  );
  NAND _107_ (
    .A(_013_),
    .B(_029_),
    .Y(_037_)
  );
  NOR _108_ (
    .A(_035_),
    .B(_037_),
    .Y(_038_)
  );
  NOR _109_ (
    .A(_033_),
    .B(_036_),
    .Y(_039_)
  );
  NAND _110_ (
    .A(_034_),
    .B(_037_),
    .Y(_040_)
  );
  NOR _111_ (
    .A(_031_),
    .B(_040_),
    .Y(_041_)
  );
  NOR _112_ (
    .A(_038_),
    .B(_041_),
    .Y(\S[3] )
  );
  NOR _113_ (
    .A(_006_),
    .B(_007_),
    .Y(_042_)
  );
  NAND _114_ (
    .A(\Y[4] ),
    .B(\X[4] ),
    .Y(_043_)
  );
  NOR _115_ (
    .A(\Y[4] ),
    .B(\X[4] ),
    .Y(_044_)
  );
  NAND _116_ (
    .A(_006_),
    .B(_007_),
    .Y(_045_)
  );
  NOR _117_ (
    .A(_042_),
    .B(_044_),
    .Y(_046_)
  );
  NOR _118_ (
    .A(_031_),
    .B(_039_),
    .Y(_047_)
  );
  NAND _119_ (
    .A(_032_),
    .B(_040_),
    .Y(_048_)
  );
  NOR _120_ (
    .A(_046_),
    .B(_048_),
    .Y(_049_)
  );
  NOR _121_ (
    .A(_044_),
    .B(_047_),
    .Y(_050_)
  );
  NAND _122_ (
    .A(_045_),
    .B(_048_),
    .Y(_051_)
  );
  NOR _123_ (
    .A(_042_),
    .B(_051_),
    .Y(_052_)
  );
  NOR _124_ (
    .A(_049_),
    .B(_052_),
    .Y(\S[4] )
  );
  NOR _125_ (
    .A(\Y[5] ),
    .B(\X[5] ),
    .Y(_053_)
  );
  NAND _126_ (
    .A(_008_),
    .B(_009_),
    .Y(_054_)
  );
  NAND _127_ (
    .A(\Y[5] ),
    .B(\X[5] ),
    .Y(_055_)
  );
  NOT _128_ (
    .A(_055_),
    .Y(_056_)
  );
  NOR _129_ (
    .A(_053_),
    .B(_056_),
    .Y(_057_)
  );
  NAND _130_ (
    .A(_054_),
    .B(_055_),
    .Y(_058_)
  );
  NOR _131_ (
    .A(_042_),
    .B(_050_),
    .Y(_059_)
  );
  NAND _132_ (
    .A(_043_),
    .B(_051_),
    .Y(_060_)
  );
  NOR _133_ (
    .A(_057_),
    .B(_060_),
    .Y(_061_)
  );
  NOR _134_ (
    .A(_058_),
    .B(_059_),
    .Y(_062_)
  );
  NOR _135_ (
    .A(_061_),
    .B(_062_),
    .Y(\S[5] )
  );
  NOR _136_ (
    .A(\Y[0] ),
    .B(\X[0] ),
    .Y(_063_)
  );
  NOR _137_ (
    .A(_021_),
    .B(_063_),
    .Y(\S[0] )
  );
  NAND _138_ (
    .A(_054_),
    .B(_060_),
    .Y(_064_)
  );
  NAND _139_ (
    .A(_055_),
    .B(_064_),
    .Y(cout)
  );
  NOR _140_ (
    .A(_017_),
    .B(_019_),
    .Y(_065_)
  );
  NAND _141_ (
    .A(_018_),
    .B(_020_),
    .Y(_066_)
  );
  NOR _142_ (
    .A(_021_),
    .B(_065_),
    .Y(_067_)
  );
  NOR _143_ (
    .A(_022_),
    .B(_066_),
    .Y(_068_)
  );
  NOR _144_ (
    .A(_067_),
    .B(_068_),
    .Y(\S[1] )
  );
  assign \Hii[0]  = \S[0] ;
  assign G50 = cout;
  assign \G50x.Gab  = cout;
  assign \GPH0.H  = \S[0] ;
  assign \GPH0.x  = \X[0] ;
  assign \GPH0.y  = \Y[0] ;
  assign \GPH1.x  = \X[1] ;
  assign \GPH1.y  = \Y[1] ;
  assign \GPH2.x  = \X[2] ;
  assign \GPH2.y  = \Y[2] ;
  assign \GPH3.x  = \X[3] ;
  assign \GPH3.y  = \Y[3] ;
  assign \GPH4.x  = \X[4] ;
  assign \GPH4.y  = \Y[4] ;
  assign \GPH5.x  = \X[5] ;
  assign \GPH5.y  = \Y[5] ;
  assign \Pii[0]  = 1'hx;
endmodule


/*Dodatkowe modu≈Çy potrzebne do przeprowadzania test benchu
module NOT(A, Y);
input A;
output Y;
assign Y = ~A;
endmodule

module NAND(A, B, Y);
input A, B;
output Y;
assign Y = ~(A & B);
endmodule

module NOR(A, B, Y);
input A, B;
output Y;
assign Y = ~(A | B);
endmodule
*/
