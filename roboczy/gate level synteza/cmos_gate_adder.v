/* Generated by Yosys 0.9 (git sha1 1979e0b1, i686-w64-mingw32.static-g++ 5.5.0 -Os) */

(* top =  1  *)
(* src = "adder.v:8" *)
module adder(\X[0] , \X[1] , \X[2] , \X[3] , \X[4] , \X[5] , \Y[0] , \Y[1] , \Y[2] , \Y[3] , \Y[4] , \Y[5] , \S[0] , \S[1] , \S[2] , \S[3] , \S[4] , \S[5] , cout);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  (* src = "adder.v:18" *)
  wire G10;
  (* src = "adder.v:18" *)
  wire G20;
  (* src = "adder.v:18" *)
  wire G30;
  (* src = "adder.v:18" *)
  wire G32;
  (* src = "adder.v:18" *)
  wire G40;
  (* src = "adder.v:18" *)
  wire G50;
  (* src = "adder.v:18" *)
  wire G54;
  (* src = "adder.v:15" *)
  wire \Gii[0] ;
  (* src = "adder.v:15" *)
  wire \Gii[1] ;
  (* src = "adder.v:15" *)
  wire \Gii[2] ;
  (* src = "adder.v:15" *)
  wire \Gii[3] ;
  (* src = "adder.v:15" *)
  wire \Gii[4] ;
  (* src = "adder.v:15" *)
  wire \Gii[5] ;
  (* src = "adder.v:17" *)
  wire \Hii[0] ;
  (* src = "adder.v:17" *)
  wire \Hii[1] ;
  (* src = "adder.v:17" *)
  wire \Hii[2] ;
  (* src = "adder.v:17" *)
  wire \Hii[3] ;
  (* src = "adder.v:17" *)
  wire \Hii[4] ;
  (* src = "adder.v:17" *)
  wire \Hii[5] ;
  (* src = "adder.v:18" *)
  wire P32;
  (* src = "adder.v:18" *)
  wire P54;
  (* src = "adder.v:16" *)
  (* unused_bits = "0" *)
  wire \Pii[0] ;
  (* src = "adder.v:16" *)
  wire \Pii[1] ;
  (* src = "adder.v:16" *)
  wire \Pii[2] ;
  (* src = "adder.v:16" *)
  wire \Pii[3] ;
  (* src = "adder.v:16" *)
  wire \Pii[4] ;
  (* src = "adder.v:16" *)
  wire \Pii[5] ;
  (* src = "adder.v:12" *)
  output \S[0] ;
  (* src = "adder.v:12" *)
  output \S[1] ;
  (* src = "adder.v:12" *)
  output \S[2] ;
  (* src = "adder.v:12" *)
  output \S[3] ;
  (* src = "adder.v:12" *)
  output \S[4] ;
  (* src = "adder.v:12" *)
  output \S[5] ;
  (* src = "adder.v:10" *)
  input \X[0] ;
  (* src = "adder.v:10" *)
  input \X[1] ;
  (* src = "adder.v:10" *)
  input \X[2] ;
  (* src = "adder.v:10" *)
  input \X[3] ;
  (* src = "adder.v:10" *)
  input \X[4] ;
  (* src = "adder.v:10" *)
  input \X[5] ;
  (* src = "adder.v:11" *)
  input \Y[0] ;
  (* src = "adder.v:11" *)
  input \Y[1] ;
  (* src = "adder.v:11" *)
  input \Y[2] ;
  (* src = "adder.v:11" *)
  input \Y[3] ;
  (* src = "adder.v:11" *)
  input \Y[4] ;
  (* src = "adder.v:11" *)
  input \Y[5] ;
  (* src = "adder.v:13" *)
  output cout;
  NOR _15_ (
    .A(\Hii[1] ),
    .B(\Gii[0] ),
    .Y(_00_)
  );
  NAND _16_ (
    .A(\Hii[1] ),
    .B(\Gii[0] ),
    .Y(_01_)
  );
  NOT _17_ (
    .A(_01_),
    .Y(_02_)
  );
  NOR _18_ (
    .A(_00_),
    .B(_02_),
    .Y(\S[1] )
  );
  NOR _19_ (
    .A(\Hii[2] ),
    .B(G10),
    .Y(_03_)
  );
  NAND _20_ (
    .A(\Hii[2] ),
    .B(G10),
    .Y(_04_)
  );
  NOT _21_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _22_ (
    .A(_03_),
    .B(_05_),
    .Y(\S[2] )
  );
  NOR _23_ (
    .A(\Hii[3] ),
    .B(G20),
    .Y(_06_)
  );
  NAND _24_ (
    .A(\Hii[3] ),
    .B(G20),
    .Y(_07_)
  );
  NOT _25_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _26_ (
    .A(_06_),
    .B(_08_),
    .Y(\S[3] )
  );
  NOR _27_ (
    .A(\Hii[4] ),
    .B(G30),
    .Y(_09_)
  );
  NAND _28_ (
    .A(\Hii[4] ),
    .B(G30),
    .Y(_10_)
  );
  NOT _29_ (
    .A(_10_),
    .Y(_11_)
  );
  NOR _30_ (
    .A(_09_),
    .B(_11_),
    .Y(\S[4] )
  );
  NOR _31_ (
    .A(\Hii[5] ),
    .B(G40),
    .Y(_12_)
  );
  NAND _32_ (
    .A(\Hii[5] ),
    .B(G40),
    .Y(_13_)
  );
  NOT _33_ (
    .A(_13_),
    .Y(_14_)
  );
  NOR _34_ (
    .A(_12_),
    .B(_14_),
    .Y(\S[5] )
  );
  (* module_not_derived = 32'd1 *)
  (* src = "adder.v:30" *)
  sfco G10x (
    .Ga(\Gii[1] ),
    .Gab(G10),
    .Gb(\Gii[0] ),
    .Pa(\Pii[1] )
  );
  (* module_not_derived = 32'd1 *)
  (* src = "adder.v:38" *)
  sfco G20x (
    .Ga(\Gii[2] ),
    .Gab(G20),
    .Gb(G10),
    .Pa(\Pii[2] )
  );
  (* module_not_derived = 32'd1 *)
  (* src = "adder.v:34" *)
  sfco G30x (
    .Ga(G32),
    .Gab(G30),
    .Gb(G10),
    .Pa(P32)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "adder.v:39" *)
  sfco G40x (
    .Ga(\Gii[4] ),
    .Gab(G40),
    .Gb(G30),
    .Pa(\Pii[4] )
  );
  (* module_not_derived = 32'd1 *)
  (* src = "adder.v:36" *)
  sfco G50x (
    .Ga(G54),
    .Gab(G50),
    .Gb(G30),
    .Pa(P54)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "adder.v:31" *)
  fco GP32 (
    .Ga(\Gii[3] ),
    .Gab(G32),
    .Gb(\Gii[2] ),
    .Pa(\Pii[3] ),
    .Pab(P32),
    .Pb(\Pii[2] )
  );
  (* module_not_derived = 32'd1 *)
  (* src = "adder.v:32" *)
  fco GP54 (
    .Ga(\Gii[5] ),
    .Gab(G54),
    .Gb(\Gii[4] ),
    .Pa(\Pii[5] ),
    .Pab(P54),
    .Pb(\Pii[4] )
  );
  (* module_not_derived = 32'd1 *)
  (* src = "adder.v:21" *)
  gph GPH0 (
    .G(\Gii[0] ),
    .H(\Hii[0] ),
    .P(\Pii[0] ),
    .x(\X[0] ),
    .y(\Y[0] )
  );
  (* module_not_derived = 32'd1 *)
  (* src = "adder.v:22" *)
  gph GPH1 (
    .G(\Gii[1] ),
    .H(\Hii[1] ),
    .P(\Pii[1] ),
    .x(\X[1] ),
    .y(\Y[1] )
  );
  (* module_not_derived = 32'd1 *)
  (* src = "adder.v:23" *)
  gph GPH2 (
    .G(\Gii[2] ),
    .H(\Hii[2] ),
    .P(\Pii[2] ),
    .x(\X[2] ),
    .y(\Y[2] )
  );
  (* module_not_derived = 32'd1 *)
  (* src = "adder.v:24" *)
  gph GPH3 (
    .G(\Gii[3] ),
    .H(\Hii[3] ),
    .P(\Pii[3] ),
    .x(\X[3] ),
    .y(\Y[3] )
  );
  (* module_not_derived = 32'd1 *)
  (* src = "adder.v:25" *)
  gph GPH4 (
    .G(\Gii[4] ),
    .H(\Hii[4] ),
    .P(\Pii[4] ),
    .x(\X[4] ),
    .y(\Y[4] )
  );
  (* module_not_derived = 32'd1 *)
  (* src = "adder.v:26" *)
  gph GPH5 (
    .G(\Gii[5] ),
    .H(\Hii[5] ),
    .P(\Pii[5] ),
    .x(\X[5] ),
    .y(\Y[5] )
  );
  assign \S[0]  = \Hii[0] ;
  assign cout = G50;
endmodule

(* src = "fco.v:4" *)
module fco(Ga, Pa, Gb, Pb, Gab, Pab);
  wire _0_;
  wire _1_;
  wire _2_;
  (* src = "fco.v:6" *)
  input Ga;
  (* src = "fco.v:7" *)
  output Gab;
  (* src = "fco.v:6" *)
  input Gb;
  (* src = "fco.v:6" *)
  input Pa;
  (* src = "fco.v:7" *)
  output Pab;
  (* src = "fco.v:6" *)
  input Pb;
  NOT _3_ (
    .A(Ga),
    .Y(_1_)
  );
  NAND _4_ (
    .A(Pa),
    .B(Gb),
    .Y(_2_)
  );
  NAND _5_ (
    .A(_1_),
    .B(_2_),
    .Y(Gab)
  );
  NAND _6_ (
    .A(Pa),
    .B(Pb),
    .Y(_0_)
  );
  NOT _7_ (
    .A(_0_),
    .Y(Pab)
  );
endmodule

(* src = "gph.v:5" *)
module gph(x, y, G, P, H);
  wire _0_;
  wire _1_;
  wire _2_;
  (* src = "gph.v:8" *)
  output G;
  (* src = "gph.v:8" *)
  output H;
  (* src = "gph.v:8" *)
  output P;
  (* src = "gph.v:7" *)
  input x;
  (* src = "gph.v:7" *)
  input y;
  NOT _3_ (
    .A(y),
    .Y(_1_)
  );
  NOR _4_ (
    .A(_0_),
    .B(_1_),
    .Y(G)
  );
  NOR _5_ (
    .A(x),
    .B(y),
    .Y(_2_)
  );
  NOT _6_ (
    .A(_2_),
    .Y(P)
  );
  NOR _7_ (
    .A(G),
    .B(_2_),
    .Y(H)
  );
  NOT _8_ (
    .A(x),
    .Y(_0_)
  );
endmodule

(* src = "sfco.v:7" *)
module sfco(Ga, Pa, Gb, Gab);
  wire _0_;
  wire _1_;
  (* src = "sfco.v:9" *)
  input Ga;
  (* src = "sfco.v:10" *)
  output Gab;
  (* src = "sfco.v:9" *)
  input Gb;
  (* src = "sfco.v:9" *)
  input Pa;
  NOT _2_ (
    .A(Ga),
    .Y(_0_)
  );
  NAND _3_ (
    .A(Pa),
    .B(Gb),
    .Y(_1_)
  );
  NAND _4_ (
    .A(_0_),
    .B(_1_),
    .Y(Gab)
  );
endmodule
